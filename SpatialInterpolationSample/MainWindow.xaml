<vk:ThemeWindow
    x:Class="SpatialInterpolation.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:vk="http://schemas.vagabond-k.com/winfx/2016/xaml"
    xmlns:local="clr-namespace:SpatialInterpolation"
    mc:Ignorable="d"
    Title="Spatial Interpolation Sample" Height="720" Width="1280"
    Background="Black"
    d:DataContext="{d:DesignInstance Type=local:MainViewModel, IsDesignTimeCreatable=False}">

    <DockPanel x:Name="root">
        <StatusBar DockPanel.Dock="Bottom" DataContext="{Binding ElementName=listBoxSamples, Path=SelectedItem}">
            <StatusBar.Resources>
                <Style x:Key="ValueStyle" TargetType="Run">
                    <Setter Property="Foreground" Value="Lime"/>
                    <Setter Property="FontWeight" Value="Bold"/>
                </Style>
            </StatusBar.Resources>
            <StatusBar.ItemsPanel>
                <ItemsPanelTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                    </Grid>
                </ItemsPanelTemplate>
            </StatusBar.ItemsPanel>
            <StatusBarItem Grid.Column="0" Visibility="{Binding Converter={vk:NotNullToVisibilityConverter}}">
                <TextBlock>
                    X: <Run Style="{DynamicResource ValueStyle}" Text="{Binding X}"/>
                </TextBlock>
            </StatusBarItem>
            <Separator Grid.Column="1" Visibility="{Binding Converter={vk:NotNullToVisibilityConverter}}"/>
            <StatusBarItem Grid.Column="2" Visibility="{Binding Converter={vk:NotNullToVisibilityConverter}}">
                <TextBlock>
                    Y: <Run Style="{DynamicResource ValueStyle}" Text="{Binding Y}"/>
                </TextBlock>
            </StatusBarItem>
            <Separator Grid.Column="3" Visibility="{Binding Converter={vk:NotNullToVisibilityConverter}}"/>
            <StatusBarItem Grid.Column="4" Visibility="{Binding Converter={vk:NotNullToVisibilityConverter}}">
                <TextBlock>
                    Value: <Run Style="{DynamicResource ValueStyle}" Text="{Binding Value}"/>
                </TextBlock>
            </StatusBarItem>
            <Separator Grid.Column="5" Visibility="{Binding Converter={vk:NotNullToVisibilityConverter}}"/>
            <Separator Grid.Column="7" Visibility="{Binding Converter={vk:NotNullToVisibilityConverter}}"/>
            <StatusBarItem Grid.Column="8">
                <TextBlock>
                    Duration: <Run Style="{DynamicResource ValueStyle}" Text="{Binding ElementName=root, Path=DataContext.Duration}"/> ms
                </TextBlock>
            </StatusBarItem>
        </StatusBar>
        <Grid Margin="6">
            <Grid.Resources>
                <Style TargetType="GroupBox" BasedOn="{StaticResource {x:Type GroupBox}}">
                    <Setter Property="Margin" Value="3"/>
                </Style>
            </Grid.Resources>

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="200"/>
                <ColumnDefinition/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition/>
            </Grid.RowDefinitions>

            <GroupBox Header="Options" Background="#80202020">
                <GroupBox.Resources>
                    <Style TargetType="HeaderedContentControl">
                        <Setter Property="Margin" Value="3"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type HeaderedContentControl}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto" SharedSizeGroup="SamplePropertyLabel"/>
                                            <ColumnDefinition/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition/>
                                            <RowDefinition/>
                                        </Grid.RowDefinitions>
                                        <Label Content="{TemplateBinding Tag}" HorizontalContentAlignment="Right"/>
                                        <Label Grid.Column="1" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" Foreground="Lime" FontWeight="Bold"/>
                                        <ContentPresenter Grid.ColumnSpan="2" Grid.Row="1" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"/>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </GroupBox.Resources>
                <StackPanel Margin="3">
                    <HeaderedContentControl Tag="Width: " Header="{Binding Width}">
                        <Slider Value="{Binding Width}" Interval="1" Minimum="1" Maximum="1920" />
                    </HeaderedContentControl>
                    <HeaderedContentControl Tag="Height: " Header="{Binding Height}">
                        <Slider Value="{Binding Height}" Interval="1" Minimum="1" Maximum="1080" />
                    </HeaderedContentControl>
                    <HeaderedContentControl Tag="Max. Value: " Header="{Binding ElementName=sliderMaximum, Path=Value}">
                        <Slider x:Name="sliderMaximum" Value="100" Interval="1" Minimum="0" Maximum="100" IsSnapToTickEnabled="True"/>
                    </HeaderedContentControl>
                    <HeaderedContentControl Tag="Min. Value: " Header="{Binding ElementName=sliderMinimum, Path=Value}">
                        <Slider x:Name="sliderMinimum" Value="0" Interval="1" Minimum="0" Maximum="100" IsSnapToTickEnabled="True"/>
                    </HeaderedContentControl>
                    <HeaderedContentControl Tag="Contour Levels: " Header="{Binding ElementName=sliderContourLevels, Path=Value}">
                        <Slider x:Name="sliderContourLevels" Value="{Binding ElementName=colorMap, Path=ContourLevels}" Interval="1" Minimum="0" Maximum="40" IsSnapToTickEnabled="True"/>
                    </HeaderedContentControl>
                    <CheckBox Content="Use GPU" IsChecked="{Binding UseGPU}" Margin="3,6"/>
                </StackPanel>
            </GroupBox>

            <GroupBox Grid.Row="1" Grid.IsSharedSizeScope="True">
                <GroupBox.Header>
                    <Grid>
                        <Grid.Resources>
                            <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                                <Setter Property="TextBlock.FontFamily" Value="Segoe MDL2 Assets"/>
                                <Setter Property="FontSize" Value="9"/>
                                <Setter Property="Padding" Value="3"/>
                            </Style>
                        </Grid.Resources>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Text="Samples"/>
                        <StackPanel Grid.Column="1" Orientation="Horizontal">
                            <Button Command="{Binding AddSampleCommand}" Content="&#xE948;"/>
                            <Button Command="{Binding RemoveSampleCommand}" Content="&#xE949;" Margin="3,0,0,0"/>
                        </StackPanel>
                    </Grid>
                </GroupBox.Header>
                <ListBox x:Name="listBoxSamples" ItemsSource="{Binding Samples}" SelectedItem="{Binding SelectedSample}" BorderThickness="0">
                    <ListBox.Resources>
                        <Style TargetType="Label">
                            <Setter Property="Foreground" Value="Lime"/>
                            <Setter Property="FontWeight" Value="Bold"/>
                            <Setter Property="Padding" Value="0"/>
                        </Style>
                        <Style TargetType="HeaderedContentControl">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type HeaderedContentControl}">
                                        <Grid Margin="2">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto" SharedSizeGroup="SamplePropertyLabel"/>
                                                <ColumnDefinition/>
                                            </Grid.ColumnDefinitions>
                                            <TextBlock Text="{TemplateBinding Header}" HorizontalAlignment="Right"/>
                                            <ContentPresenter Grid.Column="1" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"/>
                                        </Grid>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                        <DataTemplate x:Key="SampleView" DataType="{x:Type local:Sample}">
                            <StackPanel HorizontalAlignment="Stretch" Margin="5">
                                <HeaderedContentControl Header="X: ">
                                    <Label Content="{Binding X}"/>
                                </HeaderedContentControl>
                                <HeaderedContentControl Header="Y: ">
                                    <Label Content="{Binding Y}"/>
                                </HeaderedContentControl>
                                <HeaderedContentControl Header="Value: ">
                                    <Label Content="{Binding Value}"/>
                                </HeaderedContentControl>
                            </StackPanel>
                        </DataTemplate>
                        <DataTemplate x:Key="SampleEdit" DataType="{x:Type local:Sample}">
                            <StackPanel HorizontalAlignment="Stretch" Margin="5">
                                <HeaderedContentControl Header="X: ">
                                    <Slider Value="{Binding X}" Interval="1" Minimum="1" Maximum="{Binding ElementName=root, Path=DataContext.Width}" />
                                </HeaderedContentControl>
                                <HeaderedContentControl Header="Y: ">
                                    <Slider Value="{Binding Y}" Interval="1" Minimum="1" Maximum="{Binding ElementName=root, Path=DataContext.Height}" />
                                </HeaderedContentControl>
                                <HeaderedContentControl Header="Value: ">
                                    <Slider Value="{Binding Value}" Minimum="{Binding ElementName=sliderMinimum, Path=Value}" Maximum="{Binding ElementName=sliderMaximum, Path=Value}" />
                                </HeaderedContentControl>
                            </StackPanel>
                        </DataTemplate>
                    </ListBox.Resources>
                    <ListBox.ItemContainerStyle>
                        <Style TargetType="ListBoxItem" BasedOn="{StaticResource {x:Type ListBoxItem}}">
                            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                            <Style.Triggers>
                                <Trigger Property="IsSelected" Value="False">
                                    <Setter Property="ContentTemplate" Value="{DynamicResource SampleView}"/>
                                </Trigger>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="ContentTemplate" Value="{DynamicResource SampleEdit}"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </ListBox.ItemContainerStyle>
                </ListBox>
            </GroupBox>

            <Viewbox x:Name="viewbox" Grid.Column="1" Grid.RowSpan="2" Margin="3" StretchDirection="DownOnly">
                <Grid>
                    <Grid.Resources>
                        <x:Array x:Key="Colors" Type="Color">
                            <Color>Blue</Color>
                            <Color>Cyan</Color>
                            <Color>Lime</Color>
                            <Color>Yellow</Color>
                            <Color>Red</Color>
                        </x:Array>
                    </Grid.Resources>
                    <local:ColorMap
                        x:Name="colorMap"
                        Width="{Binding Width}"
                        Height="{Binding Height}"
                        Minimum="{Binding ElementName=sliderMinimum, Path=Value}"
                        Maximum="{Binding ElementName=sliderMaximum, Path=Value}"
                        Colors="{StaticResource Colors}"
                        DataSource="{Binding DataSource}"
                        Cursor="Hand"/>
                    <Rectangle Fill="#80000000" IsHitTestVisible="False" Visibility="{Binding IsBusy, Converter={vk:BooleanToVisibilityConverter}, FallbackValue=Collapsed}"/>
                </Grid>
            </Viewbox>

            <Canvas
            x:Name="canvas" Grid.Column="1" Grid.RowSpan="2" Margin="3"
            IsHitTestVisible="False"
            Visibility="{Binding ElementName=listBoxSamples, Path=SelectedItem, Converter={vk:NotNullToVisibilityConverter}}">
                <Canvas.Resources>
                    <local:PointXConverter x:Key="xConverter"/>
                    <local:PointYConverter x:Key="yConverter"/>
                </Canvas.Resources>
                <Grid Width="20" Height="20" SnapsToDevicePixels="True">
                    <Canvas.Left>
                        <MultiBinding Converter="{StaticResource xConverter}">
                            <Binding ElementName="colorMap"/>
                            <Binding ElementName="canvas"/>
                            <Binding ElementName="listBoxSamples" Path="SelectedItem.X"/>
                            <Binding Path="Width"/>
                            <Binding Path="Height"/>
                            <Binding ElementName="viewbox" Path="ActualWidth"/>
                            <Binding ElementName="canvas" Path="ActualWidth"/>
                        </MultiBinding>
                    </Canvas.Left>
                    <Canvas.Top>
                        <MultiBinding Converter="{StaticResource yConverter}">
                            <Binding ElementName="colorMap"/>
                            <Binding ElementName="canvas"/>
                            <Binding ElementName="listBoxSamples" Path="SelectedItem.Y"/>
                            <Binding Path="Width"/>
                            <Binding Path="Height"/>
                            <Binding ElementName="viewbox" Path="ActualHeight"/>
                            <Binding ElementName="canvas" Path="ActualHeight"/>
                        </MultiBinding>
                    </Canvas.Top>
                    <Grid.RenderTransform>
                        <TranslateTransform X="-10" Y="-10"/>
                    </Grid.RenderTransform>
                    <Rectangle Fill="Black" Width="3"/>
                    <Rectangle Fill="Black" Height="3"/>
                    <Rectangle Fill="White" Width="1" Height="18"/>
                    <Rectangle Fill="White" Width="18" Height="1"/>
                </Grid>
            </Canvas>

            <Grid Grid.Column="2" Grid.RowSpan="2" Margin="3">
                <Grid.Resources>
                    <Style TargetType="Label" BasedOn="{StaticResource {x:Type Label}}">
                        <Setter Property="HorizontalAlignment" Value="Right"/>
                    </Style>
                </Grid.Resources>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Label Content="{Binding ElementName=sliderMaximum, Path=Value}"/>
                <Label Grid.Row="2" Content="{Binding ElementName=sliderMinimum, Path=Value}"/>
                <FrameworkElement x:Name="legendHeight" Grid.RowSpan="2"/>
                <Grid Grid.Column="1" Grid.RowSpan="3" Width="14" Margin="3,0,0,0" Height="{Binding ElementName=legendHeight, Path=ActualHeight}">
                    <Rectangle Width="10" HorizontalAlignment="Right">
                        <Rectangle.Fill>
                            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0" GradientStops="{Binding ElementName=colorMap, Path=LegendGradientStops}" ColorInterpolationMode="ScRgbLinearInterpolation"/>
                        </Rectangle.Fill>
                    </Rectangle>
                    <Rectangle Height="1" Fill="White" VerticalAlignment="Top"/>
                    <Rectangle Height="1" Fill="White" VerticalAlignment="Bottom"/>
                </Grid>
            </Grid>

            <ProgressBar Grid.Column="1" Grid.RowSpan="2" Width="200" Height="20" IsIndeterminate="True" Visibility="{Binding IsBusy, Converter={vk:BooleanToVisibilityConverter}, FallbackValue=Collapsed}"/>
        </Grid>
    </DockPanel>
</vk:ThemeWindow>
